// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-go"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CLIENT
  LIVREUR
  ADMIN
  GESTIONNAIRE
  MARKETING
}

enum TicketCategory {
  TECHNICAL
  BILLING
  DELIVERY
  ACCOUNT
  COMPLAINT
  MARKETING
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum ConversationType {
  TICKET
  INTERNAL_GROUP
  DIRECT
}

enum DriverStatus {
  OFFLINE
  ONLINE
  BUSY
  AVAILABLE
}

// === SUPPORT MODELS ===

model SupportTicket {
  id                    String          @id @default(cuid())
  title                 String
  description           String
  category              TicketCategory
  priority              TicketPriority  @default(MEDIUM)
  status                TicketStatus    @default(OPEN)

  // User context
  createdBy             String          // phone or user id depending on auth
  createdRole           UserRole
  assignedTo            String?
  previouslyAssignedTo  String[]

  // Relations & metadata
  relatedDeliveryId     String?
  teamChannel           String?
  isInternal            Boolean         @default(false)
  participants          String[]

  // Timestamps
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  reassignedAt          DateTime?
  closedAt              DateTime?

  messages              SupportMessage[] @relation("TicketMessages")
  reassignmentLogs      ReassignmentLog[]

  @@map("support_tickets")
}

model SupportMessage {
  id                String            @id @default(cuid())
  conversationId    String
  conversationType  ConversationType  @default(TICKET)
  senderId          String
  senderRole        UserRole
  content           String
  messageType       String            @default("text")
  isInternal        Boolean           @default(false)
  replyTo           String?

  // Relations optionnelles
  ticketId          String?
  groupId           String?

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  ticket            SupportTicket?    @relation("TicketMessages", fields: [ticketId], references: [id])
  group             InternalGroupChat? @relation("GroupMessages", fields: [groupId], references: [id])

  @@map("support_messages")
}

model InternalGroupChat {
  id            String    @id @default(cuid())
  name          String
  description   String
  participants  String[]
  createdBy     String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  messages      SupportMessage[] @relation("GroupMessages")

  @@map("internal_group_chats")
}

model ReassignmentLog {
  id        String    @id @default(cuid())
  ticketId  String
  fromUser  String?
  toUser    String
  reason    String
  notes     String?
  createdBy String
  createdAt DateTime  @default(now())

  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("reassignment_logs")
}

// === EXISTING MODELS ===

model User {
  id                    String        @id @default(cuid())
  phone                 String        @unique
  address               String?
  role                  UserRole      @default(CLIENT)
  referredById          String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  profilePictureId      String?
  lastName              String        @default("")
  firstName             String        @default("")
  email                 String?
  dateOfBirth           DateTime?
  lieuResidence         String?
  isProfileCompleted    Boolean       @default(false)
  isDriverComplete      Boolean       @default(false)
  isDriverVehiculeComplete Boolean       @default(false)
  cniRecto              String?
  cniVerso              String?
  permisRecto           String?
  permisVerso           String?
  driverStatus          DriverStatus  @default(OFFLINE)
  lastKnownLat          Float?
  lastKnownLng          Float?
  lastSeenAt            DateTime?
  rating                Float?        @default(0.0)
  totalDeliveries       Int           @default(0)

  // Relations
  deliveries            Delivery[]
  addresses             UserAddress[]
  refreshTokens         RefreshToken[]
  wallet                Wallet?
  referrals             Referral[]    @relation("Referrer")
  referredBy            Referral?     @relation("Referred")
  ratings               Rating[]
  notifications         Notification[]
  files                 File[]
  promoUsages           PromoUsage[]  @relation("PromoUsage")
  subscriptions         Subscription[] @relation("Subscription")
  vehicleImages         VehicleImage[]
  
  // Relations temps réel
  realtimeConnections   RealtimeConnection[] @relation("RealtimeConnection")
  driverTrackings       DeliveryTracking[]   @relation("DriverTracking")
  sentMessages          ChatMessage[]        @relation("MessageSender")
  receivedMessages      ChatMessage[]        @relation("MessageReceiver")

  @@map("users")
}

model OTP {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("otps")
}

model Location {
  id      String  @id @default(cuid())
  address String
  lat     Float
  lng     Float

  // Relations
  pickupDeliveries Delivery[] @relation("PickupLocation")
  dropoffDeliveries Delivery[] @relation("DropoffLocation")
  packages   Package[]

  @@map("locations")
}

model Vehicle {
  id          String      @id @default(cuid())
  type        VehicleType
  plateNumber String      @unique
  make        String?
  model       String?
  year        Int?
  color       String?
  capacity    Float       // en kg
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  deliveries Delivery[]
  images     VehicleImage[]

  @@map("vehicles")
}

model Delivery {
  id              String        @id @default(cuid())
  type            DeliveryType
  status          DeliveryStatus @default(PENDING)
  priority        Priority      @default(NORMAL)
  
  // Client info
  clientPhone     String
  clientName      String?
  clientEmail     String?
  
  // Pricing
  basePrice       Float?
  distanceKm      Float?
  durationMin     Int?
  waitingMin      Int?
  totalPrice      Float?
  
  // Timing
  scheduledAt     DateTime?
  pickedUpAt      DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Driver assignment
  driverId        String?
  assignedAt      DateTime?
  
  // Payment
  paidAt          DateTime?
  paymentMethod   PaymentMethod?
  
  // Relations
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  pickupLocation  Location      @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  pickupLocationId String
  dropoffLocation Location      @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
  dropoffLocationId String
  vehicle         Vehicle?      @relation(fields: [vehicleId], references: [id])
  vehicleId       String?
  packages        Package[]
  trackings       Tracking[]
  payments        Payment[]
  ratings         Rating[]
  incidents       Incident[]
  groupedDelivery GroupedDelivery? @relation("GroupedDelivery", fields: [groupedDeliveryId], references: [id])
  groupedDeliveryId String?
  movingService   MovingService? @relation("MovingService")
  
  // Relations temps réel
  deliveryTrackings DeliveryTracking[] @relation("DeliveryTracking")
  chatMessages      ChatMessage[]      @relation("ChatMessage")

  @@map("deliveries")
}

model Package {
  id          String  @id @default(cuid())
  description String
  weightKg    Float
  size        String? // "small", "medium", "large"
  fragile     Boolean @default(false)
  value       Float?
  
  // Relations
  delivery    Delivery  @relation(fields: [deliveryId], references: [id])
  deliveryId  String
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?

  @@map("packages")
}

model Tracking {
  id        String   @id @default(cuid())
  status    String
  location  String?
  timestamp DateTime @default(now())
  
  // Relations
  delivery  Delivery @relation(fields: [deliveryId], references: [id])
  deliveryId String

  @@map("trackings")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime      @default(now())
  
  // Relations
  delivery      Delivery @relation(fields: [deliveryId], references: [id])
  deliveryId    String

  @@map("payments")
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Float    @default(0.0)
  currency  String   @default("XOF")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  transactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Float
  description String?
  createdAt   DateTime          @default(now())
  
  // Relations
  wallet      Wallet @relation(fields: [walletId], references: [id])
  walletId    String

  @@map("wallet_transactions")
}

model GroupedDelivery {
  id              String        @id @default(cuid())
  name            String
  description     String?
  status          DeliveryStatus @default(PENDING)
  totalPrice      Float?
  scheduledAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  deliveries      Delivery[] @relation("GroupedDelivery")

  @@map("grouped_deliveries")
}

model MovingService {
  id              String        @id @default(cuid())
  type            String        // "apartment", "house", "office"
  rooms           Int?
  floors          Int?
  hasElevator     Boolean       @default(false)
  hasFurniture    Boolean       @default(false)
  estimatedValue  Float?
  status          DeliveryStatus @default(PENDING)
  scheduledAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  delivery        Delivery      @relation("MovingService", fields: [deliveryId], references: [id])
  deliveryId      String        @unique

  @@map("moving_services")
}

model Promo {
  id                String    @id @default(cuid())
  code              String    @unique
  description       String?
  type              PromoType
  value             Float
  minPurchaseAmount Float?
  maxUsage          Int?
  usageCount        Int       @default(0)
  isActive          Boolean   @default(true)
  validFrom         DateTime
  validUntil        DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  usages            PromoUsage[]

  @@map("promos")
}

model PromoUsage {
  id        String   @id @default(cuid())
  usedAt    DateTime @default(now())
  
  // Relations
  promo     Promo    @relation(fields: [promoId], references: [id])
  promoId   String
  user      User     @relation("PromoUsage", fields: [userId], references: [id])
  userId    String

  @@map("promo_usages")
}

model Referral {
  id          String   @id @default(cuid())
  code        String   @unique
  isUsed      Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())
  
  // Relations
  referrer    User     @relation("Referrer", fields: [referrerId], references: [id])
  referrerId  String
  referred    User?    @relation("Referred", fields: [referredId], references: [id])
  referredId  String?  @unique

  @@map("referrals")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  
  // Relations
  user      User             @relation(fields: [userId], references: [id])
  userId    String

  @@map("notifications")
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  delivery  Delivery @relation(fields: [deliveryId], references: [id])
  deliveryId String

  @@map("ratings")
}

model Incident {
  id          String        @id @default(cuid())
  type        IncidentType
  description String
  status      IncidentStatus @default(OPEN)
  reportedAt  DateTime      @default(now())
  resolvedAt  DateTime?
  
  // Relations
  delivery    Delivery      @relation(fields: [deliveryId], references: [id])
  deliveryId  String

  @@map("incidents")
}

model UserAddress {
  id          String  @id @default(cuid())
  name        String  // "Home", "Work", etc.
  address     String
  lat         Float
  lng         Float
  isDefault   Boolean @default(false)
  
  // Relations
  user        User    @relation(fields: [userId], references: [id])
  userId      String

  @@map("user_addresses")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("refresh_tokens")
}

model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  category    FileCategory
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  vehicleImages VehicleImage[]

  @@map("files")
}

enum FileCategory {
  PROFILE
  CLIENT_DOC
  DRIVER_CNI
  DRIVER_PERMIS
  DRIVER_CARTE_GRISE
  VEHICLE_IMAGE
}

model VehicleImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  file      File     @relation(fields: [fileId], references: [id])
  fileId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String

  @@map("vehicle_images")
}

model DeliveryZone {
  id          String  @id @default(cuid())
  name        String
  description String?
  polygon     String  // GeoJSON polygon
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("delivery_zones")
}

model PricingRule {
  id          String  @id @default(cuid())
  name        String
  description String?
  basePrice   Float
  pricePerKm  Float?
  minPrice    Float?
  maxPrice    Float?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pricing_rules")
}

model Subscription {
  id          String           @id @default(cuid())
  type        SubscriptionType
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  price       Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  user        User             @relation("Subscription", fields: [userId], references: [id])
  userId      String

  @@map("subscriptions")
}

// Enums

enum VehicleType {
  MOTORCYCLE
  CAR
  VAN
  TRUCK
}

enum DeliveryType {
  EXPRESS
  STANDARD
  GROUPED
  DEMENAGEMENT
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
  FAILED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  REFUND
  BONUS
  PENALTY
}

enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_DELIVERY
}

enum NotificationType {
  DELIVERY_UPDATE
  PAYMENT
  PROMOTION
  SYSTEM
}

enum IncidentType {
  DAMAGE
  DELAY
  LOST_PACKAGE
  CUSTOMER_COMPLAINT
  DRIVER_ISSUE
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SubscriptionType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

// ==== MODELS TEMPS RÉEL (SSE + WebSocket) ====

model RealtimeConnection {
  id             String   @id @default(cuid())
  connectionType String   // "client", "driver", "admin"
  deliveryId     String?
  ipAddress      String
  userAgent      String
  connectedAt    DateTime @default(now())
  lastPing       DateTime @updatedAt
  isActive       Boolean  @default(true)
  
  // Relations
  user           User     @relation("RealtimeConnection", fields: [userId], references: [id])
  userId         String

  @@map("realtime_connections")
}

model DeliveryTracking {
  id         String   @id @default(cuid())
  latitude   Float
  longitude  Float
  accuracy   Float?
  speed      Float?
  heading    Float?
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  
  // Relations
  delivery   Delivery @relation("DeliveryTracking", fields: [deliveryId], references: [id])
  deliveryId String
  driver     User     @relation("DriverTracking", fields: [driverId], references: [id])
  driverId   String

  @@map("delivery_trackings")
}

model ChatMessage {
  id          String                 @id @default(cuid())
  chatId      String                 // Généralement deliveryId
  messageType String                 @default("text") // "text", "image", "location"
  content     String
  metadata    Json?                  // Données additionnelles (coordonnées, etc.)
  isRead      Boolean                @default(false)
  createdAt   DateTime               @default(now())
  
  // Relations
  delivery    Delivery               @relation("ChatMessage", fields: [deliveryId], references: [id])
  deliveryId  String
  sender      User                   @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  receiver    User                   @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId  String

  @@map("chat_messages")
}
